import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators ,FormControl} from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Employee } from '../../model/employee';
import { EmployeeserviceService } from '../../employeeservice.service';

@Component({
  selector: 'app-addemployee',
  standalone:true,
  imports: [ReactiveFormsModule,CommonModule],
  templateUrl: './addemployee.component.html',
  styleUrl: './addemployee.component.scss'
})
export class AddemployeeComponent {
  // ✅ Define FormGroup with properly typed controls
  posts: any[] = [];
  maxId : number = 0;
  autogeneratedId : number = 0;
  employeeForm: FormGroup<{ [K in keyof Employee]: FormControl<Employee[K]> }>;
  submitted = false;
  constructor(private fb: FormBuilder,private EmployeeserviceService: EmployeeserviceService) {
    this.employeeForm = this.fb.group({
      id: this.fb.control<number>(this.autogeneratedId, { nonNullable: true, validators: [Validators.required] }),
      name: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required] }),
      email: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required, Validators.email] }),
      mobile: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required, Validators.pattern(/^\d{10}$/)] }),
      address: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required] }),
      checkInDate: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required] })
    });
  }

  ngOnInit(): void {
    // Fetch employees on component initialization and get the max ID
    this.EmployeeserviceService.getAllEmployees().subscribe({
      next: (employees) => {
        this.maxId = this.getMaxId(employees);
        this.autogeneratedId = this.maxId + 1;        
        console.log('Max Employee ID:', this.maxId);
        console.log('Autogenerated Employee ID:', this.autogeneratedId);
        // Set the maxEmployeeId as the default value for the id field
        this.employeeForm.get('id')?.setValue(this.autogeneratedId);
        // Disable the id field to prevent user modification
        this.employeeForm.get('id')?.disable();
      },
      error: (err) => {
        console.error('Error fetching employees:', err);
      }
    });
  }

   // Function to get the max ID from the employees list
  getMaxId(employees: Employee[]): number {
    if (employees.length === 0) return 0; // If no employees, return 0

    return employees.reduce((maxId, employee) => {
      // Assuming `id` is a numeric string, so parse to integer for comparison
      const currentId = employee.id;
      const maxIdValue = maxId;
      return currentId;
    }, 0); // Default to '0' if no valid ID is found
  }
  

  submitForm() {
    if (this.employeeForm.valid) {
      const employeeData: Employee = this.employeeForm.getRawValue(); // ✅ Get strongly typed Employee data

      // Call the service to post the data to the API
      this.EmployeeserviceService.addEmployee(employeeData).subscribe({
        next: (response) => {
          console.log('Employee data submitted successfully:', response);
          alert(response);
        },
        error: (err) => {
          console.error('Error submitting employee data:', err);
        }
      });
    }
  }
}
