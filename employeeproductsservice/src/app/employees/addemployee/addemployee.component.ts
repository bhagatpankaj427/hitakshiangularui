import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators ,FormControl} from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Employee } from '../../model/employee';
import { EmployeeserviceService } from '../../employeeservice.service';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatInputModule } from '@angular/material/input';
import { MatNativeDateModule } from '@angular/material/core';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';

@Component({
  selector: 'app-addemployee',
  standalone:true,
  imports: [
    ReactiveFormsModule,
    CommonModule,
    MatDatepickerModule,
    MatInputModule,
    MatNativeDateModule,
    MatProgressSpinnerModule,
    MatSnackBarModule
  ],
  templateUrl: './addemployee.component.html',
  styleUrl: './addemployee.component.scss'  
})
export class AddemployeeComponent {
  // ✅ Define FormGroup with properly typed controls
  posts: any[] = [];
  maxId : number = 0;
  autogeneratedId : number = 0;
  employeeForm: FormGroup<{ [K in keyof Employee]: FormControl<Employee[K]> }>;
  submitted = false;
  loading: boolean = false; // Loader state
  selectedFile!: File;
  constructor(
    private fb: FormBuilder,
    private EmployeeserviceService: EmployeeserviceService,
    private snackBar: MatSnackBar
  ) {
    this.employeeForm = this.fb.group({
      id: this.fb.control<number>(this.autogeneratedId, { nonNullable: true, validators: [Validators.required] }),
      name: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required] }),
      email: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required, Validators.email] }),
      mobile: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required, Validators.pattern(/^\d{10}$/)] }),
      address: this.fb.control<string>('', { nonNullable: true, validators: [Validators.required] }),
      checkInDate: this.fb.control<string>('',  { nonNullable: true, validators: [Validators.required] }),
      profileImage: this.fb.control<File>(null!, { nonNullable: true, validators: [Validators.required] })
    });
  }

  ngOnInit(): void {
    // Fetch employees on component initialization and get the max ID
    this.EmployeeserviceService.getAllEmployees().subscribe({
      next: (employees) => {
        this.maxId = this.getMaxId(employees);
        this.autogeneratedId = this.maxId + 1;        
        console.log('Max Employee ID:', this.maxId);
        console.log('Autogenerated Employee ID:', this.autogeneratedId);
        // Set the maxEmployeeId as the default value for the id field
        this.employeeForm.get('id')?.setValue(this.autogeneratedId);
        // Disable the id field to prevent user modification
        this.employeeForm.get('id')?.disable();
      },
      error: (err) => {
        console.error('Error fetching employees:', err);
      }
    });
  }

   // Function to get the max ID from the employees list
  getMaxId(employees: Employee[]): number {
    if (employees.length === 0) return 0; // If no employees, return 0

    return employees.reduce((maxId, employee) => {
      // Assuming `id` is a numeric string, so parse to integer for comparison
      const currentId = employee.id;
      const maxIdValue = maxId;
      return currentId;
    }, 0); // Default to '0' if no valid ID is found
  }

  onDateChange(event: any) {
    let formattedDate = new Date(event.value).toISOString().split('T')[0]; // Manually formatting date to YYYY-MM-DD
    this.employeeForm.patchValue({ checkInDate: formattedDate });
  }

  // Show Snackbar Message
  showPopupMessage(message: string, action: string = 'OK') {
    this.snackBar.open(message, action, {
      duration: 3000, // Auto close after 3 seconds
      horizontalPosition: 'center',
      verticalPosition: 'top',
    });
  }
  
  //File Upload
  onFileSelected(event: any) {
    if (event.target.files.length > 0) {
      this.selectedFile = event.target.files[0];
      this.employeeForm.patchValue({ profileImage: this.selectedFile });
    }
  }
  

  submitForm() {
    if (this.employeeForm.valid) 
      {
      this.loading = true; // Show loader
      console.log('Submitting form...', this.employeeForm.value);
     // const employeeData: Employee = this.employeeForm.getRawValue(); // ✅ Get strongly typed Employee data     
     //Bind form data
     const formValues = this.employeeForm.getRawValue(); 
     const formData = new FormData();
     formData.append('id', formValues.id.toString()); // Convert to string if needed
     formData.append('name', formValues.name);
     formData.append('email', formValues.email);
     formData.append('mobile', formValues.mobile);
     formData.append('address', formValues.address);
     formData.append('checkInDate', formValues.checkInDate);
      formData.append('profileImage', this.selectedFile); 
      // Call the service to post the data to the API
      this.EmployeeserviceService.addEmployee(formData).subscribe({
        next: (response) => {
          console.log('Employee data submitted successfully:', response);          
            // Reset the form
        this.employeeForm.reset();
        this.showPopupMessage('Employee added successfully!', 'Close'); // ✅ Show success message
        },
        error: (err) => {
          console.error('Error submitting employee data:', err);
          this.showPopupMessage('Error submitting form', 'Retry'); // ✅ Show error message
        },
        complete: () => {
          this.loading = false; // Hide loader after response
        },
      });
    }
    else {
      this.employeeForm.markAllAsTouched();
    }
  }
}
